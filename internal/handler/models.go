package handler

import (
	"fmt"
	"main/internal/fetcher"
	"main/internal/model"
	"main/pkg/str"
	"main/pkg/telegram"
	"main/pkg/utils"
	"strings"
)

type vacancy struct {
	area       string
	experience string
	keywords   string
}

func (f *vacancy) IsFilled() bool {
	return f.area != "" && f.experience != "" && f.keywords != ""
}

func newStartMessage(chatID int64, withStop bool) *telegram.SendMessage {
	text := `–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–ø–æ—Å–æ–±–µ–Ω —Å–æ–±–∏—Ä–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ üëÄ`

	buttons := []telegram.InlineKeyboardButton{
		{
			Text:    "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üì©",
			Command: "/sub",
		},
		{
			Text:    "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è üì§",
			Command: "/unsub",
		},
		{
			Text:    "–ö–æ–Ω—Ç–∞–∫—Ç—ã üç™",
			Command: "/contacts",
		},
		{
			Text:    "–°–ø—Ä–∞–≤–∫–∞ üí≠",
			Command: "/man",
		},
	}
	if withStop {
		buttons = append(buttons, telegram.InlineKeyboardButton{
			Text:    "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É ‚úâÔ∏è",
			Command: "stop",
		})
	}
	keyboard := telegram.NewInlineKeyboard(
		telegram.InColButtonsMarkup,
		buttons...,
	)
	return &telegram.SendMessage{
		ChatID:   chatID,
		Text:     text,
		Keyboard: keyboard,
	}
}

func newContactsMessage(chatID int64) *telegram.SendMessage {
	text := `–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ üç™ @ushakovn üç™`

	keyboard := telegram.NewInlineKeyboard(telegram.InColButtonsMarkup,
		telegram.InlineKeyboardButton{
			Text:    "–ù–∞–∑–∞–¥ üîç",
			Command: "/back",
		})

	return &telegram.SendMessage{
		ChatID:   chatID,
		Text:     text,
		Keyboard: keyboard,
	}
}

func newSubMessage(chatID int64) *telegram.SendMessage {
	text := `–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –≤–∞–∫–∞–Ω—Å–∏–π üì©
–£–∫–∞–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π `

	keyboard := telegram.NewInlineKeyboard(telegram.InColButtonsMarkup,
		telegram.InlineKeyboardButton{
			Text:    "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üåé",
			Command: "/area",
		},
		telegram.InlineKeyboardButton{
			Text:    "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã üëî",
			Command: "/experience",
		},
		telegram.InlineKeyboardButton{
			Text:    "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ üå†",
			Command: "/keywords",
		},
		telegram.InlineKeyboardButton{
			Text:    "–ù–∞–∑–∞–¥ üîç",
			Command: "/back",
		})

	return &telegram.SendMessage{
		ChatID:   chatID,
		Text:     text,
		Keyboard: keyboard,
	}
}

func newUnsubCompleteMessage(chatID int64) *telegram.SendMessage {
	keyboard := telegram.NewInlineKeyboard(telegram.InColButtonsMarkup,
		telegram.InlineKeyboardButton{
			Text:    "–ù–∞–∑–∞–¥ üîç",
			Command: "/back",
		})

	return &telegram.SendMessage{
		ChatID:   chatID,
		Keyboard: keyboard,
		Text:     fmt.Sprintf(`–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π ‚ùóÔ∏è`),
	}
}

func newUnsubMessage(chatID int64, subs []*model.ChatSubscription) *telegram.SendMessage {
	text := `–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π üì§
–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—É—é –ø–æ–¥–ø–∏—Å–∫—É üëÄ`

	buttons := make([]telegram.InlineKeyboardButton, 0, len(subs))

	for index, sub := range subs {
		buttons = append(buttons, telegram.InlineKeyboardButton{
			Text:    fmt.Sprintf("%d üå†Ô∏è %s", index+1, sub.Keywords),
			Command: fmt.Sprintf("/unsub?id=%d", sub.SubscriptionID),
		})
	}
	buttons = append(buttons, telegram.InlineKeyboardButton{
		Text:    "–ù–∞–∑–∞–¥ üîç",
		Command: "/back",
	})

	keyboard := telegram.NewInlineKeyboard(
		telegram.InColButtonsMarkup,
		buttons...,
	)
	return &telegram.SendMessage{
		ChatID:   chatID,
		Text:     text,
		Keyboard: keyboard,
	}
}

func newManMessage(chatID int64) *telegram.SendMessage {
	text := `–ë–æ—Ç –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã üìë`

	keyboard := telegram.NewInlineKeyboard(telegram.InColButtonsMarkup,
		telegram.InlineKeyboardButton{
			Text:    "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üì©",
			Command: "/sub",
		},
		telegram.InlineKeyboardButton{
			Text:    "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è üì§",
			Command: "/unsub",
		},
		telegram.InlineKeyboardButton{
			Text:    "–°–ø—Ä–∞–≤–∫–∞ üí≠",
			Command: "/man",
		},
		telegram.InlineKeyboardButton{
			Text:    "–ù–∞–∑–∞–¥ üîç",
			Command: "/back",
		})

	return &telegram.SendMessage{
		ChatID:   chatID,
		Text:     text,
		Keyboard: keyboard,
	}
}

func newAreaMessage(chatID int64) *telegram.SendMessage {
	text := `–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö üåé`

	keyboard := telegram.NewInlineKeyboard(telegram.InColButtonsMarkup,
		telegram.InlineKeyboardButton{
			Text:    "–ú–æ—Å–∫–≤–∞",
			Command: "/area?id=1",
		},
		telegram.InlineKeyboardButton{
			Text:    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
			Command: "/area?id=2",
		},
		telegram.InlineKeyboardButton{
			Text:    "–ù–∞–∑–∞–¥ üîç",
			Command: "/back",
		})

	return &telegram.SendMessage{
		ChatID:   chatID,
		Text:     text,
		Keyboard: keyboard,
	}
}

func newExperienceMessage(chatID int64) *telegram.SendMessage {
	text := `–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö üëî`

	keyboard := telegram.NewInlineKeyboard(telegram.InColButtonsMarkup,
		telegram.InlineKeyboardButton{
			Text:    "–û—Ç 1 –¥–æ 3 –ª–µ—Ç",
			Command: "/experience?id=between1And3",
		},
		telegram.InlineKeyboardButton{
			Text:    "–û—Ç 3 –¥–æ 6 –ª–µ—Ç",
			Command: "/experience?id=between3And6",
		},
		telegram.InlineKeyboardButton{
			Text:    "–ë–µ–∑ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞",
			Command: "/experience?id=noExperience",
		},
		telegram.InlineKeyboardButton{
			Text:    "–ù–∞–∑–∞–¥ üîç",
			Command: "/back",
		})

	return &telegram.SendMessage{
		ChatID:   chatID,
		Text:     text,
		Keyboard: keyboard,
	}
}

func newKeywordsMessage(chatID int64) *telegram.SendMessage {
	return &telegram.SendMessage{
		ChatID: chatID,
		Text:   `–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ üå†`,
	}
}

func newFillFieldsMessage(chatID int64) *telegram.SendMessage {
	text := `–£–∫–∞–∂–∏—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ª—è ‚úÖ`

	keyboard := telegram.NewInlineKeyboard(telegram.InColButtonsMarkup,
		telegram.InlineKeyboardButton{
			Text:    "–ù–∞–∑–∞–¥ üîç",
			Command: "/back",
		})

	return &telegram.SendMessage{
		ChatID:   chatID,
		Text:     text,
		Keyboard: keyboard,
	}
}

func newConfirmCancelMessage(chatID int64) *telegram.SendMessage {
	text := `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –≤—ã–±–æ—Ä ‚úâÔ∏è`

	keyboard := telegram.NewInlineKeyboard(telegram.InColButtonsMarkup,
		telegram.InlineKeyboardButton{
			Text:    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ",
			Command: "/confirm",
		},
		telegram.InlineKeyboardButton{
			Text:    "–û—Ç–º–µ–Ω–∞ ‚ùó",
			Command: "/cancel",
		},
		telegram.InlineKeyboardButton{
			Text:    "–ù–∞–∑–∞–¥ üîç",
			Command: "/back",
		})

	return &telegram.SendMessage{
		ChatID:   chatID,
		Text:     text,
		Keyboard: keyboard,
	}
}

func newCancelMessage(chatID int64) *telegram.SendMessage {
	return &telegram.SendMessage{
		ChatID: chatID,
		Text:   `–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –≤–∞–∫–∞–Ω—Å–∏–π ‚ùó`,
	}
}

func newConfirmMessage(chatID int64) *telegram.SendMessage {
	return &telegram.SendMessage{
		ChatID: chatID,
		Text: `–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ ‚úÖ
–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç –ø–æ–¥–æ–±—Ä–∞–Ω üç™`,
	}
}

func newVacancyMessage(chatID int64, keywords string, item *fetcher.VacancyResponseItem) *telegram.SendMessage {
	s := strings.Builder{}

	url := fmt.Sprintf("<a href=\"%s\">–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è</a>", item.AlternateUrl)
	s.WriteString(fmt.Sprintf("üå†üì®üå†üì®üå† %s\n\n", url))

	s.WriteString(fmt.Sprintf("<b>üç™ –ü–æ–¥–ø–∏—Å–∫–∞</b>\n%s\n\n", str.Sanitize(keywords)))

	s.WriteString(fmt.Sprintf("<b>üëî –ù–∞–∑–≤–∞–Ω–∏–µ</b>\n%s\n\n", str.Sanitize(item.Name)))

	if area := item.Area; area != nil && area.Name != "" {
		s.WriteString(fmt.Sprintf("<b>üåé –ì–æ—Ä–æ–¥</b>\n%s\n\n", str.Sanitize(area.Name)))
	}

	if salary := item.Salary; salary != nil && salary.Currency != "" {
		curr := str.Sanitize(salary.Currency)
		curr = strings.ToUpper(curr)

		if fork := salary.From > 0 && salary.To > 0; fork {
			s.WriteString(fmt.Sprintf("<b>üí∂ –ó–∞—Ä–ø–ª–∞—Ç–∞</b>\n–û—Ç %d –¥–æ %d (%s)", salary.From, salary.To, curr))
		} else if from := salary.From; from > 0 {
			s.WriteString(fmt.Sprintf("<b>üí∂ –ó–∞—Ä–ø–ª–∞—Ç–∞</b>\n–û—Ç %d (%s)", from, curr))
		} else if to := salary.To; to > 0 {
			s.WriteString(fmt.Sprintf("<b>üí∂ –ó–∞—Ä–ø–ª–∞—Ç–∞</b>\n–î–æ %d (%s)", to, curr))
		}

		if salary.Gross {
			s.WriteString(" <i>–¥–æ –≤—ã—á–µ—Ç–∞ –ù–î–§–õ</i>")
		}
		s.WriteString("\n\n")
	}

	if employer := item.Employer; employer != nil && employer.Name != "" { // TODO: add employer url
		s.WriteString(fmt.Sprintf("<b>‚≠ê –ö–æ–º–ø–∞–Ω–∏—è</b>\n%s\n\n", str.Sanitize(employer.Name)))
	}

	if snippet := item.Snippet; snippet != nil {
		if req := snippet.Requirement; req != "" {
			s.WriteString(fmt.Sprintf("<b>üë®‚Äçüíº –¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏ </b>\n%s\n\n", str.Sanitize(req)))
		}
		if resp := snippet.Responsibility; resp != "" {
			s.WriteString(fmt.Sprintf("<b>üí° –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏</b>\n%s\n\n", str.Sanitize(resp)))
		}
	}

	if exp := item.Experience; exp != nil {
		if exp := exp.Name; exp != "" {
			s.WriteString(fmt.Sprintf("<b>‚è≥ –¢—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã</b>\n%s\n\n", str.Sanitize(exp)))
		}
	}

	if hhUrl := item.AlternateUrl; hhUrl != "" {
		hhUrl := fmt.Sprintf("<a href=\"%s\">–°—Å—ã–ª–∫–∞</a>", hhUrl)
		s.WriteString(fmt.Sprintf("<b>üìë –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é</b>\n%s\n\n", hhUrl))
	}

	if pub := item.PublishedAt; pub != "" {
		const (
			hhTimeLayout  = "2006-01-02T15:04:05-0700"
			msgTimeLayout = "02-01-2006 15:04"
		)
		if pub, err := utils.TimeStrCast(pub, hhTimeLayout, msgTimeLayout); err == nil {
			s.WriteString(fmt.Sprintf("<b>üïí –í–∞–∫–∞–Ω—Å–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞</b>\n%s\n\n", pub))
		}
	}
	s.WriteString("üå†üì®üå†üì®üå†\n\n")

	if tags := str.BuildSentenceTags(keywords); len(tags) >= 0 {
		for tagIndex, tag := range tags {
			s.WriteString(fmt.Sprintf("<b>%s</b>", tag))

			if tagIndex < len(tags)-1 {
				s.WriteString(" ")
			}
		}
		s.WriteString("\n")
	}
	text := s.String()

	keyboard := telegram.NewInlineKeyboard(telegram.InColButtonsMarkup,
		telegram.InlineKeyboardButton{
			Text:    "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é –±–æ—Ç–∞ üí≠",
			Command: "/start",
		})

	return &telegram.SendMessage{
		ChatID:   chatID,
		Text:     text,
		Keyboard: keyboard,
	}
}

func isWrongVacancy(item *fetcher.VacancyResponseItem) bool {
	switch {
	case
		item.Archived,
		item.AlternateUrl == "",
		item.Name == "",
		item.Snippet == nil,
		item.Employer == nil:
		return true
	default:
		return false
	}
}
