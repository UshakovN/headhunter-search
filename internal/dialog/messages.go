package dialog

import (
	"fmt"
	"main/internal/fetcher"
	"main/internal/model"
	"main/pkg/telegram"
)

func newStartMessage(chatID int64) *telegram.SendMessage {
	text := `–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–ø–æ—Å–æ–±–µ–Ω —Å–æ–±–∏—Ä–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ üëÄ`

	keyboard := telegram.NewInlineKeyboard(telegram.InColButtonsMarkup,
		telegram.InlineKeyboardButton{
			Text:    "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üì©",
			Command: string(LinkSub),
		},
		telegram.InlineKeyboardButton{
			Text:    "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è üì§",
			Command: string(LinkUnsub),
		},
		telegram.InlineKeyboardButton{
			Text:    "–ö–æ–Ω—Ç–∞–∫—Ç—ã üç™",
			Command: string(LinkContacts),
		},
		telegram.InlineKeyboardButton{
			Text:    "–°–ø—Ä–∞–≤–∫–∞ üí≠",
			Command: string(LinkMan),
		},
		telegram.InlineKeyboardButton{
			Text:    "–ù–∞–∑–∞–¥ üìë",
			Command: string(LinkBack),
		})

	return &telegram.SendMessage{
		ChatID:   chatID,
		Text:     text,
		Keyboard: keyboard,
	}
}

func newContactsMessage(chatID int64) *telegram.SendMessage {
	return &telegram.SendMessage{
		ChatID: chatID,
		Text:   `–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ üç™ @ushakovn üç™`,
	}
}

func newSubMessage(chatID int64) *telegram.SendMessage {
	text := `–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –≤–∞–∫–∞–Ω—Å–∏–π üì©
–£–∫–∞–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π `

	keyboard := telegram.NewInlineKeyboard(telegram.InColButtonsMarkup,
		telegram.InlineKeyboardButton{
			Text:    "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üåé",
			Command: string(LinkSubArea),
		},
		telegram.InlineKeyboardButton{
			Text:    "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã üëî",
			Command: string(LinkSubExperience),
		},
		telegram.InlineKeyboardButton{
			Text:    "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ üå†",
			Command: string(LinkSubKeywords),
		})

	return &telegram.SendMessage{
		ChatID:   chatID,
		Text:     text,
		Keyboard: keyboard,
	}
}

func newUnsubMessage(chatID int64, subs []*model.Subscription) *telegram.SendMessage {
	text := `–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π üì§
–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—É—é –ø–æ–¥–ø–∏—Å–∫—É üëÄ`

	buttons := make([]telegram.InlineKeyboardButton, 0, len(subs))

	for index, sub := range subs {
		buttons = append(buttons, telegram.InlineKeyboardButton{
			Text:    fmt.Sprintf("%d üìå %s", index+1, sub.Keywords),
			Command: fmt.Sprintf("action/unsub/sub?id=%s", sub.SubscriptionID),
		})
	}
	keyboard := telegram.NewInlineKeyboard(
		telegram.InColButtonsMarkup,
		buttons...,
	)
	return &telegram.SendMessage{
		ChatID:   chatID,
		Text:     text,
		Keyboard: keyboard,
	}
}

func newManMessage(chatID int64) *telegram.SendMessage {
	text := `–ë–æ—Ç –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã üìã`

	keyboard := telegram.NewInlineKeyboard(telegram.InColButtonsMarkup,
		telegram.InlineKeyboardButton{
			Text:    "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üì©",
			Command: "/dialog/sub",
		},
		telegram.InlineKeyboardButton{
			Text:    "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è üì§",
			Command: "/dialog/unsub",
		},
		telegram.InlineKeyboardButton{
			Text:    "–°–ø—Ä–∞–≤–∫–∞ üí≠",
			Command: "/dialog/man",
		})

	return &telegram.SendMessage{
		ChatID:   chatID,
		Text:     text,
		Keyboard: keyboard,
	}
}

func newCoalesceMessage(m ...*telegram.SendMessage) *telegram.SendMessage {
	for _, m := range m {
		if m != nil {
			return m
		}
	}
	return nil
}

func newUndefinedMessage(chatID int64) *telegram.SendMessage {
	text := `–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ üîç
–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–ø—Ä–∞–≤–∫–æ–π`

	keyboard := telegram.NewInlineKeyboard(telegram.InColButtonsMarkup,
		telegram.InlineKeyboardButton{
			Text:    "–°–ø—Ä–∞–≤–∫–∞ üí≠",
			Command: "/dialog/man",
		})

	return &telegram.SendMessage{
		ChatID:   chatID,
		Text:     text,
		Keyboard: keyboard,
	}
}

func newResetMessage(chatID int64) *telegram.SendMessage {
	return &telegram.SendMessage{
		ChatID: chatID,
		Text:   `–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã ‚ùó`,
	}
}

func newSubAreaMessage(chatID int64) *telegram.SendMessage {
	text := `–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö üåé`

	keyboard := telegram.NewInlineKeyboard(telegram.InColButtonsMarkup,
		telegram.InlineKeyboardButton{
			Text:    "–ú–æ—Å–∫–≤–∞",
			Command: "action/sub/form/area?id=1",
		},
		telegram.InlineKeyboardButton{
			Text:    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
			Command: "action/sub/form/area?id=2",
		})

	return &telegram.SendMessage{
		ChatID:   chatID,
		Text:     text,
		Keyboard: keyboard,
	}
}

func newSubExperienceMessage(chatID int64) *telegram.SendMessage {
	text := `–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö üëî`

	keyboard := telegram.NewInlineKeyboard(telegram.InColButtonsMarkup,
		telegram.InlineKeyboardButton{
			Text:    "–û—Ç 1 –¥–æ 3 –ª–µ—Ç",
			Command: "action/sub/form/experience?id=between1And3",
		},
		telegram.InlineKeyboardButton{
			Text:    "–û—Ç 3 –¥–æ 6 –ª–µ—Ç",
			Command: "action/sub/form/experience?id=between3And6",
		},
		telegram.InlineKeyboardButton{
			Text:    "–ë–µ–∑ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞",
			Command: "action/sub/form/form/experience?id=noExperience",
		})

	return &telegram.SendMessage{
		ChatID:   chatID,
		Text:     text,
		Keyboard: keyboard,
	}
}

func newSubKeywordsMessage(chatID int64) *telegram.SendMessage {
	return &telegram.SendMessage{
		ChatID: chatID,
		Text:   `–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ üå†`,
	}
}

func newFormFillFieldsMessage(chatID int64) *telegram.SendMessage {
	return &telegram.SendMessage{
		ChatID: chatID,
		Text:   `–£–∫–∞–∂–∏—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ª—è ‚úÖ`,
	}
}

func newFormConfirmCancelMessage(chatID int64) *telegram.SendMessage {
	text := `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –≤—ã–±–æ—Ä ‚úâÔ∏è`

	keyboard := telegram.NewInlineKeyboard(telegram.InColButtonsMarkup,
		telegram.InlineKeyboardButton{
			Text:    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ",
			Command: "action/sub/form/confirm",
		},
		telegram.InlineKeyboardButton{
			Text:    "–û—Ç–º–µ–Ω–∞ ‚ùó",
			Command: "action/sub/form/cancel",
		})

	return &telegram.SendMessage{
		ChatID:   chatID,
		Text:     text,
		Keyboard: keyboard,
	}
}

func newFormCancelMessage(chatID int64) *telegram.SendMessage {
	return &telegram.SendMessage{
		ChatID: chatID,
		Text:   `–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –≤–∞–∫–∞–Ω—Å–∏–π ‚ùó`,
	}
}

func newFormConfirmMessage(chatID int64) *telegram.SendMessage {
	return &telegram.SendMessage{
		ChatID: chatID,
		Text: `–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ ‚úÖ
–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç –ø–æ–¥–æ–±—Ä–∞–Ω.`,
	}
}

func newUnsubSubMessage(chatID int64, keywords string) *telegram.SendMessage {
	return &telegram.SendMessage{
		ChatID: chatID,
		Text:   fmt.Sprintf(`–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ ‚ùó%s ‚ùó`, keywords),
	}
}

func newVacancyMessage(chatID int64, item *fetcher.VacancyResponseItem) *telegram.SendMessage {
	const (
		t = `‚ö°
–í–∞–∫–∞–Ω—Å–∏—è: %s
–ì–æ—Ä–æ–¥: %s
–ó–∞—Ä–ø–ª–∞—Ç–∞: %d - %d (%s)
–°—Ç–∞—Ç—É—Å: %s
–ö–æ–º–ø–∞–Ω–∏—è: %s (%s)
–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: %s
–¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏: %s
–¢—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: %s
–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: %s
–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: %s
–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: %s
‚ö°`
	)
	text := fmt.Sprintf(t,
		item.Name,
		item.Area.Name,
		item.Salary.From,
		item.Salary.To,
		item.Salary.Currency,
		item.Type.Name,
		item.Employer.Name,
		item.Employer.Url,
		item.Snippet.Responsibility,
		item.Snippet.Requirement,
		item.Experience.Name,
		item.Employment.Name,
		item.PublishedAt,
		item.Url,
	)
	return &telegram.SendMessage{
		ChatID: chatID,
		Text:   text,
	}
}
